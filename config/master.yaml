---
- hosts: all
  become: true
  tasks:
  - name: Install necessary packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: true
    vars:
      packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg2
        - net-tools

  - name: Install containerd
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: true
    vars:
      packages:
        - containerd

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: true
    vars:
      packages:
        - kubelet=1.26.0-00
        - kubeadm=1.26.0-00
        - kubectl=1.26.0-00

  - name: Configure containerd
    blockinfile:
      create: true
      path: /etc/modules-load.d/containerd.conf
      block: |
        overlay
        br_netfilter

  - name: Enable kernel modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Configure IP forwarding and iptables
    blockinfile:
      create: true
      path: /etc/sysctl.conf
      block: |
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Persist changes
    command: sysctl -p

  - name: Get IP eth1 addr
    shell: ifconfig eth1 | grep 'inet' | cut -d{{':'}} -f2 | awk '{ print $2 }'
    register: output

  - name: Configure kubelet
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      line: Environment="KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }}"

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10" --pod-network-cidr=172.16.0.0/16

  - name: Create kube directory
    file:
      path: /home/vagrant/.kube
      state: directory

  - name: Setup kubeconfig for vagrant user
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: true
      owner: vagrant
      group: vagrant
      mode: '0644'

  - name: Download calico.conf
    get_url:
      url: https://docs.projectcalico.org/v3.20/manifests/calico.yaml
      dest: /home/vagrant/calico.yaml

  - name: Add pod config to calico.yaml
    lineinfile:
      dest: /home/vagrant/calico.yaml
      regexp: '^\s{12}#\s*- name: CALICO_IPV4POOL_CIDR.*$'
      line: '            - name: CALICO_IPV4POOL_CIDR'

  - name: Add pod config to calico.yaml
    lineinfile:
      dest: /home/vagrant/calico.yaml
      regexp: '^\s{12}#\s*  value: "192.168.0.0\/16".*$'
      line: '              value: "172.16.0.0/16"'

  - name: Install calico CNI
    become: false
    command: kubectl create -f calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
